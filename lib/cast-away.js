// Generated by CoffeeScript 1.7.1
(function() {
  var CastAway, CustomReceiver, EventEmitter, MediaControls, Session,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('./event_emitter');

  Session = require('./session');

  MediaControls = require('./media-controls');

  CustomReceiver = require('./custom-receiver');

  CastAway = (function(_super) {
    __extends(CastAway, _super);

    function CastAway(_arg) {
      var _ref;
      _ref = _arg != null ? _arg : {}, this.applicationID = _ref.applicationID, this.namespace = _ref.namespace;
      this.cast = (typeof chrome !== "undefined" && chrome !== null ? chrome.cast : void 0) || (typeof cast !== "undefined" && cast !== null);
    }

    CastAway.prototype.initialize = function(cb) {
      var initializeCastApi, intervalId;
      if (!this.cast) {
        return;
      }
      initializeCastApi = (function(_this) {
        return function() {
          var apiConfig, app, error, sessionRequest, success;
          app = _this.applicationID || _this.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;
          sessionRequest = new _this.cast.SessionRequest(app);
          apiConfig = new _this.cast.ApiConfig(sessionRequest, function() {
            var data;
            data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this.sessionListener.apply(_this, data);
          }, function() {
            var data;
            data = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this.receiverListener.apply(_this, data);
          });
          success = function(data) {
            return cb(null, data);
          };
          error = function(err) {
            return cb(err);
          };
          return _this.cast.initialize(apiConfig, success, error);
        };
      })(this);
      return intervalId = setInterval((function() {
        if (chrome.cast && chrome.cast.isAvailable && chrome.cast.media && chrome.cast.SessionRequest) {
          clearInterval(intervalId);
          return initializeCastApi();
        }
      }), 15);
    };

    CastAway.prototype.receive = function(config) {
      if (config == null) {
        config = {};
      }
      this.receiver = new CustomReceiver(config, this);
      this.receiver.start();
      return this.receiver;
    };

    CastAway.prototype.sessionListener = function(session) {
      this.currentSession = session;
      session.addUpdateListener(this.sessionUpdateListener);
      this.emit('session:started', new Session(this.currentSession, this));
      if (session.media.length !== 0) {
        return this.emit('session:existingMedia', new Session(this.currentSession, this), new MediaControls(this.currentSession.media[0], this));
      }
    };

    CastAway.prototype.receiverListener = function(receiver) {
      var available, state;
      available = this.cast.ReceiverAvailability.AVAILABLE;
      state = receiver === available ? 'available' : 'unavailable';
      return this.emit("receivers:" + state);
    };

    CastAway.prototype.sessionUpdateListener = function(isAlive) {
      if (!isAlive) {
        return this.currentSession = null;
      }
    };

    CastAway.prototype.requestSession = function(cb) {
      var onError, onSuccess;
      onSuccess = (function(_this) {
        return function(session) {
          return cb(null, new Session(session, _this));
        };
      })(this);
      onError = function(err) {
        return cb(err);
      };
      return this.cast.requestSession(onSuccess, onError);
    };

    return CastAway;

  })(EventEmitter);

  window.CastAway = CastAway;

}).call(this);
